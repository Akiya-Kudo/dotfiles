readonly DOTFILES_PATH=$HOME/dotfiles
readonly REMOTE_URL=https://github.com/Akiya-Kudo/dotfiles.git
ARCH_TYPE=$(uname -m)

# ------------------------------ settings for install ------------------------------ 
# color settings
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
fi

# success message: green message
success() {
    echo "${GREEN}${1}${NORMAL}"
}

# error message: red message and exit as error
error() {
    echo "${RED}${1}${NORMAL}"
    exit 1
}

# bold message: message bold
bold() {
    echo "${BOLD}${1}${NORMAL}"
}

# displaying help messages
helpmsg() {
    echo "Usage: $0 [--help | -h]" 0>&2
    echo ""
}

# arrowhead message: at the head of message, added arrow figure
arrow() {
    echo "${BLUE}==>${NORMAL} ${BOLD}${1}${NORMAL}"
}

# check existence: with using type
has() {
    type "$1" > /dev/null 2>&1
}

# detect os type
detect_os() {
    UNAME=$(uname)
    if [ $UNAME == 'Darwin' ]; then
        OS='macOS'
    elif [ $UNAME == 'Linux' ]; then
        OS='Linux'
    else
        echo 'Who are you?'
        exit 1
    fi
}

# $1(first param is estimate to be command you wanna use) 
# $2 and later(the command to install $1)
# if $1 does not exist, run $2 
install() {
    arrow "Installing ${1}"
    if has "$1"; then
        bold "${1} is already exists."
    else
        arrow "Installing ${1}"
        ${@:2}
        if [ $? = 0 ]; then
            success "Successfully installed ${1}."
        else
            error "An unexpected error occurred when trying to install ${1}."
        fi
    fi
}

yes_or_no() {
    local prompt_message="$1"
    shift
    local confirm_command="$@"

    while true; do
        read -p "${BLUE}${BOLD}$prompt_message ? (y/n)${NORMAL}: " answer
        if [[ "$answer" == [Yy] ]]; then
            eval "$confirm_command"
            if [[ $? -eq 0 ]]; then
                echo -e "${GREEN}${BOLD}Configuration completed successfully.${NORMAL}"
            else
                echo -e "${RED}${BOLD}Configuration failed.${NORMAL}"
            fi
            break
            break
        elif [[ "$answer" == [Nn] ]]; then
            echo "Skipped!"
            break
        else
            echo -e "${RED}Invalid input. Please enter 'y' or 'n'.${NORMAL}"
        fi
    done
}

# ------------------------------  install methods ------------------------------

# Install Rosetta 2 for Apple Silicon
losetta_download() {
    if [[  $OS == 'macOS' && $ARCH_TYPE == "arm64" ]] ; then 
        if ! (arch -arch x86_64 uname -m &> /dev/null) ; then
            echo "no Rosetta installed"
            softwareupdate --install-rosetta --agree-to-license
        else
            echo "Rosetta 2 is aleady existed."
        fi
    else 
        echo "losseta 2 installation is not required, so skipped."
    fi
}

# Install xcode
xcode_download() {
    if [[  $OS == 'macOS' ]] ; then 
        if ! xcode-select --print-path &> /dev/null; then
            # Install command line tools
            echo "${BLUE}X-code Command line tools not found. Installing...${NORMAL}"
            xcode-select --install
        else
            echo "X-code Command line tools are already installed, so skipped."
        fi
    fi
}

# install brew
brew_install() {
    install brew NONINTERACTIVE=1 | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" < /dev/null
    if [ $? -ne 0 ]; then
        error "Failed to install Homebrew."
    fi
    if [ `grep 'eval "$(/opt/homebrew/bin/brew shellenv)"' ~/.zprofile | wc -l` -eq 0 ]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zprofile
    fi
    eval "$(/opt/homebrew/bin/brew shellenv)"
}

# install git and setting gitconfig and sshkey with user input
gitconfig_set() {
    read -p "${BLUE}Enter your Git user name${NORMAL}: " git_username
    read -p "${BLUE}Enter your Git user email${NORMAL}: " git_useremail

    git config --global user.name "$git_username"
    git config --global user.email "$git_useremail"

    echo "Git user.name set to: $(git config --global user.name)"
    echo "Git user.email set to: $(git config --global user.email)"
    return 0
}
git_install() {
    install git brew install git
    if [ ! -f $HOME/.gitconfig ]; then
        yes_or_no "Do you want to configure gitconfig" gitconfig_set
    fi
}

# download dotfiles
dotfiles_download() {
    arrow "Downloading dotfiles"
    cd $HOME
    if [ ! -d $DOTFILES_PATH ]; then
        if has git; then
            git clone --recursive $REMOTE_URL $DOTFILES_PATH
        else
            error "Please install git first and then run."
            exit 1
        fi
        if [ $? = 0 ]; then
            success "Successfully downloaded dotfiles."
        else
            error "An unexpected error occurred when trying to git clone"
        fi
    else
        bold "dotfiles is already exists."
    fi
}

# install zsh plugins and link zsh config
zsh_setting() {
    arrow "Installing zsh plugins and linking zsh config."
    ln -snfv $DOTFILES_PATH/.config/zsh/.zshrc $HOME/.zshrc
    mkdir -p $HOME/.config/zsh/plugins
    if [ ! -d $HOME/.config/zsh/plugins/zsh-syntax-highlighting ]; then
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.config/zsh/plugins/zsh-syntax-highlighting
        success "Successfully install zsh plugins."
    else
        bold "zsh plugins already installed."
    fi
}

# install bat
bat_install() {
    install bat brew install bat
}

# install exa
eza_install() {
    install eza brew install eza
}

# install starship
starship_install() {
    install starship brew install starship
    ln -snfv $DOTFILES_PATH/.config/starship/starship.toml $HOME/.config/starship.toml
    starship preset bracketed-segments -o ~/.config/starship.toml
}

# install volta 
volta_install() {
    install volta brew install volta
}

# install yazi
yazi_install() {
    install yazi brew install yazi
}

# install jetbrains mono
Cascadia_Code_Font_install() {
    arrow "Installing CascadiaCode Font"
    if [ ! -d "$HOME/Library/Fonts/CascadiaCode" ]; then
        mkdir -p "$HOME/Library/Fonts/CascadiaCode"
        curl -fLO https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Cascadia%20Code.zip
        unzip Cascadia%20Code.zip -d $HOME/Library/Fonts/CascadiaCode
        rm -f Cascadia%20Code.zip
        mv "$HOME/dotfiles/font/CascadiaCode" "$HOME/Library/Fonts/"
        success "Successfully installed CascadiaCode"
    else
        bold "CascadiaCode is already exists."
    fi
}

# set up mac defaults
mac_defaults_setup() {
    if [[  $OS == 'macOS' ]] ; then 
        arrow "Setting up macOS defaults"
        source $HOME/dotfiles/osx
        success "Apple Mac OS Setting is completed."
    fi
}

# install GUI Apps
brewfile_download() {
    arrow "Installing GUI Apps"
    brew bundle --file=$DOTFILES_PATH/.config/brew/Brewfile
    if [[ $OS == 'macOS' ]] ; then
        brew bundle --file=$DOTFILES_PATH/.config/brew/Brewfile.mac
    fi
    success "GUI Apps installation is completed."
}

# vscode settings.json symlink
vscode_settingjson() {
    arrow "Synlink settings.json"
    if [[ $OS == 'macOS' ]] ; then
        ln -snfv $DOTFILES_PATH/.config/vscode/settings.json $HOME/Library/Application\ Support/Code/User/settings.json
    elif [[ $OS == 'Linux' ]] ; then
        ln -snfv $DOTFILES_PATH/.config/vscode/settings.json $HOME/.config/Code/User/settings.json
    else
        echo "Your OS is not supported. Please set up manually."
    fi
    return 0
}
# vscode extentions.txt symlink 
vscode_extensions() {
    arrow "Install vscode Extensions"
    if [[ $OS == 'macOS' ]] ; then
        cat << EOF >> ~/.zprofile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF
        # Install extensions using the code command
        if [ "$(which code)" != "" ]; then
            cat < "${DOTFILES_PATH}/.config/vscode/extensions" | while read -r line
            do
                code --install-extension "$line"
            done
        else
            echo "${RED}${BOLD}Cannot find code command.... Try to install your-self! then Please try it again after! ${NORMAL}"
            echo "${RED}ref:https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line ${NORMAL}"
            return 1
        fi
        return 0
    else
        echo "Your OS is not supported. Please set up manually. (detect that not macos)"
        return 1
    fi
}
# vscode settings
vscode_setting() {
    yes_or_no "Do you want to use my vscode settings.json" vscode_settingjson
    yes_or_no "Do you want to Install vscode extensions" vscode_extensions
}

# configure python and npm  and g++ and bits for atcoder
atcoder_configure() {
    # online-judge-tools
    arrow "Install online-judge-tools"
    brew install python@3.9
    ln -s /opt/homebrew/opt/python@3.9/bin/pip3.9 /opt/homebrew/opt/python@3.9/bin/pip3
    if [ -x "$(command -v pip3)" ]; then
        echo "Using pip3 path: $(which pip3)"
        pip3 install online-judge-tools
        echo "${BLUE}Please log in to AtCoder !${NORMAL}"
        oj login https://beta.atcoder.jp/
    else
        echo "${RED}installaction of online-judge-tools failed becouase of pip3 not found. Please install pip3 and try again.${NORMAL}"
        return 1
    fi
    # atcoder-cli
    arrow "Install atcoder-cli using volta"
    if [ -x "$(command -v volta)" ] && ! [ -x "$(command -v acc)" ]; then
        volta install atcoder-cli
        echo "${BLUE}Please log in to AtCoder !${NORMAL}"
        acc login
        echo "copying main.cpp and template.json"
        cd $(acc config-dir)
        mkdir "cpp" && cd "cpp"
        cp $DOTFILES_PATH/.config/atcoder/main.cpp .
        cp $DOTFILES_PATH/.config/atcoder/template.json .
        cd ../
        cp $DOTFILES_PATH/.config/atcoder/config.json .
        # 現在のユーザー名を取得
        username=$USER
        # 置換する文字列を定義
        new_line="    \"oj-path\": \"/Users/${username}/Library/Python/3.9/bin/oj\","
        # 2行目を新しい文字列に置き換え
        sed -i.bak "2s|.*|$new_line|" config.json
        cd $DOTFILES_PATH
    else
        echo "skipped because of some reasons : Volta is not installed or acc is already installed."
    fi
    # g++
    arrow "set up g++"
    brew install gcc@14
    sudo ln -s /opt/homebrew/opt/gcc@14/bin/g++-14 /usr/local/bin/g++
    # Be cautious with system directories and use sudo if necessary
    sudo mkdir -p /usr/local/include/bits/
    sudo cp "$DOTFILES_PATH/.config/atcoder/stdc++.h" "/usr/local/include/bits"
}

# atcoder setting
atcoder_settings() {
    if [[ $OS == 'macOS' ]] ; then
        arrow "Setting up AtCoder"
        yes_or_no "Do you want to set up atcoder with c++ and oj and acc ? : " atcoder_configure
    fi
}

# ------------------------------ main ------------------------------

# first get sudo, then for macos, do the installation process
main() {
    sudo echo ''
    detect_os
    if [ $OS = 'macOS' ]; then
        losetta_download
        xcode_download
        brew_install
        git_install
        dotfiles_download
        zsh_setting
        eza_install
        starship_install
        bat_install
        volta_install
        Cascadia_Code_Font_install
        brewfile_download
        vscode_setting
        atcoder_settings
        mac_defaults_setup
        success "Install completed!"
    else
        error 'not supported os'
    fi
}

# argument handling
while [ $# -gt 0 ]; do
    case ${1} in
        --debug|-d)
            set -uex
            ;;
        --help|-h)
            helpmsg
            exit 1
            ;;
        *)
            ;;
    esac
    shift
done

main

exit 0